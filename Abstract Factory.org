* Intent
   Provide an interface for creating families of related or dependent objects
   without specifying their concrete classes.
* Also Known As
   Kit
* Motivation   
   [[file:img/abstractFactory-1.png][abstractFactory-1]]
* Applicability
   Use the Abstract Factory pattern when :
   - a system should be independent of how its products are created, composed,
     and represented.
   - a system should be configured with one of multiple families of products.
   - a family of related product objects is designed to be used together, and
     you need to enforce this constraint.
   - you want to provide a class library of products, and you want to reveal
     just their interfaces, not their implementations.
* Structure
   [[file:img/abstractFactoryStructure.png][abstractFactoryStructure]]
* Participants
   - AbstractFactory (WidgetFactory)
     - declares an interface for operations that create abstract product
       objects.
   - ConcreteFactory (MotifWidgetFactory, PMWidgetFactory) 
     - implements the operations to create concrete product objects.
   - AbstractProduct (Window, ScrollBar) 
     - declares an interface for a type of product object.
   - ConcreteProduct (MotifWindow, MotifScrollBar)
     - defines a product object to be created by the corresponding concrete
       factory.
     - implements the AbstractProduct interface.
   - Client
     - uses only interfaces declared by AbstractFactory and AbstractProduct
       classes.
* Collaborations
   - Normally a single instance of a ConcreteFactory class is created at
     run-time. This concrete factory creates product objects having a
     particular implementation. To create different product objects, clients
     should use a different concrete factory.
   - AbstractFactory defers creation of product objects to its ConcreteFactory
     subclass.
* Consequences
   The Abstract Factory pattern has the following benefits and liabilities:
   1. It isolates concrete classes.
   2. It makes exchanging product families easy.
   3. It promotes consistency among products.
   4. Supporting new kinds of products is difficult.
* Implementation
   Here are some useful techniques for implementing the Abstract Factory pattern.
   1. Factories as singletons.
   2. Creating the products.
      
      The most common way to do this is to define a factory method for each
      product.

      If many product families are possible, the concrete factory can be
      implemented using the Prototype pattern.

   3. Defining extensible factories.

      AbstractFactory usually defines a different operation for each kind of
      product it can produce.

      A more flexible but less safe design is to add a parameter to operations
      that create objects. In fact with this approach, AbstractFactory only
      needs a single "Make" operation with a parameter indicating the kind of
      object to create.
* Sample Code
   [[file:example/AbstractFactory.cpp]]
   [[file:code/maze_AbstractFactory.cpp]]
* Known Uses
   InterViews uses the "Kit" suffix [Lin92] to denote AbstractFactory classes.

   ET++ [WGM88] uses the Abstract Factory pattern to achieve portability across
   different window systems (X Windows and SunView, for example).
* Related Patterns
   AbstractFactory classes are often implemented with factory methods, but they
   can also be implemented using Prototype.

   A concrete factory is often a singleton.
