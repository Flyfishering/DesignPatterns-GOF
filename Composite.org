* Intent
  Compose objects into tree structures to represent part-whole hierarchies.
  Composite lets clients treat individual objects and compositions of objects
  uniformly.
* Motivation
  Graphics applications like drawing editors and schematic capture systems let
  users build complex diagrams out of simple components. A simple implementation
  could define classes for graphical primitives such as Text and Lines plus
  other classes that act as containers for these primitives.

  But there's a problem with this approach: Code that uses these classes must
  treat primitive and container objects differently, even if most of the time
  the user treats them identically. 

  [[file:img/composite motivation.png][composite motivation]]

  The key to the Composite pattern is an abstract class that represents both
  primitives and their containers.
  
  a typical composite object structure of recursively composed Graphic objects:
  - [[file:img/composite motivation 0.png][composite motivation 0]]
* Applicability
  Use the Composite pattern when :
  - you want to represent part-whole hierarchies of objects.
  - you want clients to be able to ignore the difference between compositions of
    objects and individual objects. Clients will treat all objects in the
    composite structure uniformly.


  [[file:img/composite structure.png][composite structure]]
* Participants
  - Component (Graphic)
    - declares the interface for objects in the composition.
    - implements default behavior for the interface common to all classes, as
      appropriate.
    - declares an interface for accessing and managing its child components.
    - (optional) defines an interface for accessing a component's parent in the
      recursive structure, and implements it if that's appropriate.
  - Leaf (Rectangle, Line, Text, etc.)
    - represents leaf objects in the composition. A leaf has no children.
    - defines behavior for primitive objects in the composition.
  - Composite (Picture)
    - defines behavior for components having children.
    - stores child components.
    - implements child-related operations in the Component interface.
  - Client
    - manipulates objects in the composition through the Component interface.
* Collaborations
  - Clients use the Component class interface to interact with objects in the
    composite structure. If the recipient is a Leaf, then the request is handled
    directly. If the recipient is a Composite, then it usually forwards requests
    to its child components, possibly performing additional operations before
    and/or after forwarding.
* Consequences
  The Composite pattern :
  - defines class hierarchies consisting of primitive objects and composite
    objects. Primitive objects can be composed into more complex objects, which
    in turn can be composed, and so on recursively. Wherever client code expects
    a primitive object, it can also take a composite object.
  - makes the client simple. Clients can treat composite structures and
    individual objects uniformly.
  - makes it easier to add new kinds of components. Newly defined Composite or
    Leaf subclasses work automatically with existing structures and client code.
    Clients don't have to be changed for new Component classes.
  - can make your design overly general. The disadvantage of making it easy to
    add new components is that it makes it harder to restrict the components of
    a composite. Sometimes you want a composite to have only certain components.
    With Composite, you can't rely on the type system to enforce those
    constraints for you. You'll have to use run-time checks instead.
* Implementation
  There are many issues to consider when implementing the Composite pattern:
  1. Explicit parent references. 

     Maintaining references from child components to their parent can simplify
     the traversal and management of a composite structure. The parent reference
     simplifies moving up the structure and deleting a component. Parent
     references also help support the Chain of Responsibility (251) pattern.

     The usual place to define the parent reference is in the Component class.
     Leaf and Composite classes can inherit the reference and the operations
     that manage it.

     With parent references, it's essential to maintain the invariant that all
     children of a composite have as their parent the composite that in turn has
     them as children. The *easiest way* to ensure this is to change a
     component's parent only when it's being added or removed from a composite.
     If this can be implemented once in the Add and Remove operations of the
     Composite class, then it can be inherited by all the subclasses, and the
     invariant will be maintained automatically.
  2. Sharing components. 

     It's often useful to share components, for example, to reduce storage
     requirements. But when a component can have no more than one parent,
     sharing components becomes difficult.

     A possible solution is for children to store multiple parents. But that
     can lead to ambiguities as a request propagates up the structure.
  3. Maximizing the Component interface.

     One of the goals of the Composite pattern is to make clients unaware of the
     specific Leaf or Composite classes they're using.

     However, this goal will sometimes conflict with the principle of class
     hierarchy design that says a class should only define operations that are
     meaningful to its subclasses. 

     Sometimes a little creativity shows how an operation that would appear to
     make sense only for Composites can be implemented for all Components by
     moving it to the Component class.
  4. Declaring the child management operations. 
     
     The decision involves a trade-off between safety and transparency:
     - Defining the child management interface at the root of the class hierarchy
       gives you transparency, because you can treat all components uniformly. It
       costs you safety, however, because clients may try to do meaningless things
       like add and remove objects from leaves.
     - Defining child management in the Composite class gives you safety,
       because any attempt to add or remove objects from leaves will be caught
       at compile-time in a statically typed language like C++. But you lose
       transparency, because leaves and composites have different interfaces.

     We have emphasized transparency over safety in this pattern. If you opt for
     safety, then at times you may lose type information and have to convert a
     component into a composite. How can you do this without resorting to a
     type-unsafe cast?

     One approach is to declare an operation Composite* GetComposite() in the
     Component class. Component provides a default operation that returns a null
     pointer. The Composite class redefines this operation to return itself
     through the this pointer:
     #+begin_src c++ 
       class Composite;

       class Component {
       public:
         //...
         virtual Composite* GetComposite() { return 0; }
       };

       class Composite : public Component {
       public:
         void Add(Component*);
         // ...
         virtual Composite* GetComposite() { return this; }
       };

       class Leaf : public Component {
         // ...
       };
     #+end_src
     
     GetComposite lets you query a component to see if it's a composite. You
     can perform Add and Remove safely on the composite it returns.
     #+begin_src c++ 
       Composite* aComposite = new Composite;
       Leaf* aLeaf = new Leaf;
       Component* aComponent;
       Composite* test;
       aComponent = aComposite;

       if (test = aComponent->GetComposite()) {
         test->Add(new Leaf);
        }

       aComponent = aLeaf;

       if (test = aComponent->GetComposite()) {
         test->Add(new Leaf); // will not add leaf
        }
     #+end_src

     The only way to provide transparency is to define default Add and Remove
     operations in Component. That creates a new problem: There's no way to
     implement Component::Add without introducing the possibility of it failing.
     You could make it do nothing, but that ignores an important consideration;
     that is, an attempt to add something to a leaf probably indicates a bug.
     In that case, the Add operation produces garbage. You could make it delete
     its argument, but that might not be what clients expect.

     Usually it's better to make Add and Remove fail by default (perhaps by
     raising an exception) if the component isn't allowed to have children or
     if the argument of Remove isn't a child of the component, respectively.
     Another alternative is to change the meaning of "remove" slightly. If the
     component maintains a parent reference, then we could redefine
     Component::Remove to remove itself from its parent. However, there still
     isn't a meaningful interpretation for a corresponding Add.
  5. Should Component implement a list of Components? 

     You might be tempted to define the set of children as an instance variable
     in the Component class where the child access and management operations are
     declared. But putting the child pointer in the base class incurs a space
     penalty for every leaf, even though a leaf never has children. This is
     worthwhile only if there are relatively few children in the structure.
  6. Child ordering.

     Many designs specify an ordering on the children of Composite.

     When child ordering is an issue, you must design child access and management
     interfaces carefully to manage the sequence of children. The Iterator (289)
     pattern can guide you in this.
  7. Caching to improve performance. 

     If you need to traverse or search compositions frequently, the Composite
     class can cache traversal or search information about its children. The
     Composite can cache actual results or just information that lets it
     short-circuit the traversal or search.

     Changes to a component will require invalidating the caches of its parents.
     This works best when components know their parents. So if you're using
     caching, you need to define an interface for telling composites that their
     caches are invalid.
  8. Who should delete components?

     In languages without garbage collection, it's usually best to make a
     Composite responsible for deleting its children when it's destroyed. An
     exception to this rule is when Leaf objects are immutable and thus can be
     shared.
  9. What's the best data structure for storing components?

     The choice of data structure depends (as always) on efficiency. In fact, it
     isn't even necessary to use a general-purpose data structure at all.
     Sometimes composites have a variable for each child, although this requires
     each subclass of Composite to implement its own management interface. See
     Interpreter for an example.
* Sample Code
  #+begin_src c++ 
    class Equipment {
    public:
      virtual ~Equipment();

      const char* Name() { return _name; }

      virtual Watt Power();
      virtual Currency NetPrice();
      virtual Currency DiscountPrice();
      virtual void Add(Equipment*);
      virtual void Remove(Equipment*);
      virtual Iterator* CreateIterator();

    protected:
      Equipment(const char*);

    private:
      const char* _name;
    };

    class CompositeEquipment : public Equipment {
    public:
      virtual ~CompositeEquipment();

      virtual Watt Power();
      virtual Currency NetPrice();
      virtual Currency DiscountPrice();
      virtual void Add(Equipment*);
      virtual void Remove(Equipment*);
      virtual Iterator* CreateIterator();

    protected:
      CompositeEquipment(const char*);

    private:
      List _equipment;
    };

    Currency CompositeEquipment::NetPrice () {
      Iterator* i = CreateIterator();
      Currency total = 0;

      for (i->First(); !i->IsDone(); i->Next()) {
        total += i->CurrentItem()->NetPrice();
      }

      delete i;

      return total;
    }

    class Chassis : public CompositeEquipment {
    public:
      Chassis(const char*);
      virtual ~Chassis();

      virtual Watt Power();
      virtual Currency NetPrice();
      virtual Currency DiscountPrice();
    };

    Cabinet* cabinet = new Cabinet("PC Cabinet");
    Chassis* chassis = new Chassis("PC Chassis");

    cabinet->Add(chassis);

    Bus* bus = new Bus("MCA Bus");
    bus->Add(new Card("16Mbs Token Ring"));
    chassis->Add(bus);
    chassis->Add(new FloppyDisk("3.5in Floppy"));
    cout << "The net price is " << chassis->NetPrice() << endl;
  #+end_src
* Known Uses
  Examples of the Composite pattern can be found in almost all object-oriented
  systems. The original View class of Smalltalk Model/View/Controller [KP88] was
  a Composite, and nearly every user interface toolkit or framework has followed
  in its steps, including ET++ (with its VObjects [WGM88]) and InterViews
  (Styles [LCI+92], Graphics [VL88], and Glyphs [CL90]).
* Related Patterns
  Often the component-parent link is used for a Chain of Responsibility (251).

  Decorator (196) is often used with Composite. When decorators and composites
  are used together, they will usually have a common parent class. So decorators
  will have to support the Component interface with operations like Add, Remove,
  and GetChild.

  Flyweight (218) lets you share components, but they can no longer refer to
  their parents.

  Iterator (289) can be used to traverse composites.

  Visitor (366) localizes operations and behavior that would otherwise be
  distributed across Composite and Leaf classes.
